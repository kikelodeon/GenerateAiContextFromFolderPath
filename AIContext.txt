### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\.gitignore

# Ignore bin and obj folders
**/bin/
**/obj/
# Ignore Production properties
**/Properties/Production/

# Frontend
/_Frontend/kronoscape.net/node_modules
/_Frontend/kronoscape.net/build

-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext.sln


Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 17
VisualStudioVersion = 17.14.36121.58 d17.14
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "GenrateAIContext", "GenrateAIContext\GenrateAIContext.csproj", "{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Debug|arm64 = Debug|arm64
		Debug|x86 = Debug|x86
		Release|Any CPU = Release|Any CPU
		Release|arm64 = Release|arm64
		Release|x86 = Release|x86
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Debug|arm64.ActiveCfg = Debug|arm64
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Debug|arm64.Build.0 = Debug|arm64
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Debug|x86.ActiveCfg = Debug|x86
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Debug|x86.Build.0 = Debug|x86
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Release|Any CPU.Build.0 = Release|Any CPU
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Release|arm64.ActiveCfg = Release|arm64
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Release|arm64.Build.0 = Release|arm64
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Release|x86.ActiveCfg = Release|x86
		{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}.Release|x86.Build.0 = Release|x86
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {5C70C483-411C-4198-BF08-E8C2E6D09B59}
	EndGlobalSection
EndGlobal


-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext\ConfigForm.cs

using System;
using System.IO;
using System.Linq;
using System.Drawing;
using System.Windows.Forms;
using Microsoft.VisualBasic;
using Newtonsoft.Json;

namespace GenrateAIContext
{
    public class ConfigForm : Form
    {
        private TextBox txtRoot;
        private ListBox lstExcludedFolders;
        private ListBox lstExcludedExts;
        private TextBox txtOutput;
        private Button btnGenerate;
        private Button btnCancel;

        public ConfigForm(string initialRoot)
        {
            // Form básico
            Text = "Configurar Generar Contexto IA";
            StartPosition = FormStartPosition.CenterParent;
            ClientSize = new Size(600, 480);
            FormBorderStyle = FormBorderStyle.FixedDialog;
            MaximizeBox = false;
            MinimizeBox = false;

            // Panel principal con tabla
            var main = new TableLayoutPanel
            {
                Dock = DockStyle.Top,
                AutoSize = true,
                ColumnCount = 3,
                RowCount = 4,
                Padding = new Padding(10),
            };
            main.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));      // etiqueta
            main.ColumnStyles.Add(new ColumnStyle(SizeType.Percent, 100F)); // control
            main.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));      // botón

            // Fila 0: Carpeta raíz
            main.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            main.Controls.Add(new Label { Text = "Carpeta raíz:", Anchor = AnchorStyles.Right, AutoSize = true }, 0, 0);
            txtRoot = new TextBox { Dock = DockStyle.Fill };
            var btnBrowseRoot = new Button { Text = "...", AutoSize = true };
            main.Controls.Add(txtRoot, 1, 0);
            main.Controls.Add(btnBrowseRoot, 2, 0);
            btnBrowseRoot.Click += (_, __) =>
            {
                using var dlg = new FolderBrowserDialog { SelectedPath = txtRoot.Text };
                if (dlg.ShowDialog() == DialogResult.OK)
                    txtRoot.Text = dlg.SelectedPath;
            };

            // Fila 1: Excluir carpetas
            main.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            main.Controls.Add(new Label { Text = "Excluir carpetas:", Anchor = AnchorStyles.Right, AutoSize = true }, 0, 1);
            lstExcludedFolders = new ListBox { Height = 100, Dock = DockStyle.Fill };
            var pnlFolderBtns = new FlowLayoutPanel { FlowDirection = FlowDirection.TopDown, AutoSize = true };
            var btnAddFolder = new Button { Text = "+", AutoSize = true };
            var btnRemoveFolder = new Button { Text = "–", AutoSize = true };
            pnlFolderBtns.Controls.AddRange(new Control[] { btnAddFolder, btnRemoveFolder });
            main.Controls.Add(lstExcludedFolders, 1, 1);
            main.Controls.Add(pnlFolderBtns, 2, 1);
            btnAddFolder.Click += (_, __) =>
            {
                using var dlg = new FolderBrowserDialog { SelectedPath = txtRoot.Text };
                if (dlg.ShowDialog() == DialogResult.OK)
                {
                    var rel = PathHelpers.GetRelativePath(txtRoot.Text, dlg.SelectedPath);
                    if (!lstExcludedFolders.Items.Contains(rel))
                        lstExcludedFolders.Items.Add(rel);
                }
            };
            btnRemoveFolder.Click += (_, __) =>
            {
                if (lstExcludedFolders.SelectedItem != null)
                    lstExcludedFolders.Items.Remove(lstExcludedFolders.SelectedItem);
            };

            // Fila 2: Excluir extensiones
            main.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            main.Controls.Add(new Label { Text = "Excluir extensiones:", Anchor = AnchorStyles.Right, AutoSize = true }, 0, 2);
            lstExcludedExts = new ListBox { Height = 100, Dock = DockStyle.Fill };
            var pnlExtBtns = new FlowLayoutPanel { FlowDirection = FlowDirection.TopDown, AutoSize = true };
            var btnAddExt = new Button { Text = "+", AutoSize = true };
            var btnRemoveExt = new Button { Text = "–", AutoSize = true };
            pnlExtBtns.Controls.AddRange(new Control[] { btnAddExt, btnRemoveExt });
            main.Controls.Add(lstExcludedExts, 1, 2);
            main.Controls.Add(pnlExtBtns, 2, 2);
            btnAddExt.Click += (_, __) =>
            {
                var ext = Interaction.InputBox(
                    "Extensión (incluye el punto):", "Agregar Extensión", ".log"
                ).Trim();
                if (!string.IsNullOrEmpty(ext))
                {
                    if (!ext.StartsWith(".")) ext = "." + ext;
                    if (!lstExcludedExts.Items.Contains(ext))
                        lstExcludedExts.Items.Add(ext);
                }
            };
            btnRemoveExt.Click += (_, __) =>
            {
                if (lstExcludedExts.SelectedItem != null)
                    lstExcludedExts.Items.Remove(lstExcludedExts.SelectedItem);
            };

            // Fila 3: Archivo de salida
            main.RowStyles.Add(new RowStyle(SizeType.AutoSize));
            main.Controls.Add(new Label { Text = "Archivo salida:", Anchor = AnchorStyles.Right, AutoSize = true }, 0, 3);
            txtOutput = new TextBox { Dock = DockStyle.Fill };
            var btnBrowseOut = new Button { Text = "...", AutoSize = true };
            main.Controls.Add(txtOutput, 1, 3);
            main.Controls.Add(btnBrowseOut, 2, 3);
            btnBrowseOut.Click += (_, __) =>
            {
                using var dlg = new SaveFileDialog
                {
                    InitialDirectory = txtRoot.Text,
                    FileName = txtOutput.Text,
                    Filter = "Text files|*.txt|All files|*.*"
                };
                if (dlg.ShowDialog() == DialogResult.OK)
                    txtOutput.Text = Path.GetFileName(dlg.FileName);
            };

            Controls.Add(main);

            // Panel inferior con botones
            var bottom = new FlowLayoutPanel
            {
                Dock = DockStyle.Bottom,
                FlowDirection = FlowDirection.RightToLeft,
                Padding = new Padding(10),
                AutoSize = true
            };
            btnCancel = new Button { Text = "Cancelar", AutoSize = true, DialogResult = DialogResult.Cancel };
            btnGenerate = new Button { Text = "Generar", AutoSize = true };
            btnGenerate.Click += Generate_Click;
            bottom.Controls.Add(btnCancel);
            bottom.Controls.Add(btnGenerate);
            Controls.Add(bottom);

            // Cargo configuración inicial (o valores por defecto)
            txtRoot.Text = initialRoot;
            new[] { "bin", "obj", ".git", ".vs", "TestData" }
                .ToList().ForEach(f => lstExcludedFolders.Items.Add(f));
            new[] { ".exe", ".dll", ".pdb", ".png", ".jpg", ".user", ".suo" }
                .ToList().ForEach(e => lstExcludedExts.Items.Add(e));
            txtOutput.Text = "AIContext.txt";
        }

        private void Generate_Click(object sender, EventArgs e)
        {
            var root = txtRoot.Text.Trim();
            if (!Directory.Exists(root))
            {
                MessageBox.Show("La carpeta raíz no existe.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return;
            }

            var exFolders = lstExcludedFolders.Items.OfType<string>().ToArray();
            var exExts = lstExcludedExts.Items.OfType<string>().ToArray();
            var outFile = txtOutput.Text.Trim();

            // Genero el contexto
            ContextGenerator.GenerateContext(root, exFolders, exExts, outFile);

            MessageBox.Show($"Contexto generado en:\n{Path.Combine(root, outFile)}",
                            "Éxito", MessageBoxButtons.OK, MessageBoxIcon.Information);
            Close();
        }
    }
}


-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext\ContextGenerator.cs

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace GenrateAIContext
{
    public static class ContextGenerator
    {
        public static void GenerateContext(
            string baseFolder,
            string[] excludedFolders,
            string[] excludedExtensions,
            string outputFileName)
        {
            // Rutas
            var outPath = Path.Combine(baseFolder, outputFileName);
            var outFullPath = Path.GetFullPath(outPath);

            // 1) Enumerar y filtrar
            var exF = new HashSet<string>(excludedFolders, StringComparer.OrdinalIgnoreCase);
            var exE = new HashSet<string>(excludedExtensions, StringComparer.OrdinalIgnoreCase);

            var files = Directory
                .EnumerateFiles(baseFolder, "*.*", SearchOption.AllDirectories)
                // excluyo carpetas
                .Where(f =>
                    !PathHelpers.GetRelativePath(baseFolder, f)
                                .Split(Path.DirectorySeparatorChar)
                                .Any(seg => exF.Contains(seg)))
                // excluyo extensiones
                .Where(f => !exE.Contains(Path.GetExtension(f)))
                // excluyo *exactamente* el archivo de salida
                .Where(f => !string.Equals(Path.GetFullPath(f), outFullPath, StringComparison.OrdinalIgnoreCase))
                .OrderBy(f => f)
                .ToList();

            // 2) Escritura atómica a temp
            var tmpPath = outPath + ".tmp";
            using (var w = new StreamWriter(tmpPath, false, Encoding.UTF8))
            {
                var tree = new List<string>();
                foreach (var f in files)
                {
                    w.WriteLine($"### {f}\n");

                    // Si falla la lectura, simplemente lo anotamos y seguimos
                    try
                    {
                        w.WriteLine(File.ReadAllText(f));
                    }
                    catch (IOException)
                    {
                        w.WriteLine($"// SKIPPED (locked): {f}");
                    }

                    w.WriteLine("\n-----\n");
                    tree.Add(PathHelpers.GetRelativePath(baseFolder, f));
                }

                w.WriteLine("### Árbol:");
                foreach (var line in tree)
                    w.WriteLine(line);
            }

            // 3) Reemplazo seguro
            File.Delete(outPath);
            File.Move(tmpPath, outPath);
        }
    }
}


-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext\GenrateAIContext.csproj

<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="15.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
    <LangVersion>latest</LangVersion>
  </PropertyGroup>
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectTypeGuids>{82b43b9b-a64c-4715-b499-d71e9ca2bd60};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <ProjectGuid>{F81F2EF6-E8A8-492C-8AD1-1EB7828B8ADD}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>GenrateAIContext</RootNamespace>
    <AssemblyName>GenrateAIContext</AssemblyName>
    <TargetFrameworkVersion>v4.8</TargetFrameworkVersion>
    <GeneratePkgDefFile>true</GeneratePkgDefFile>
    <UseCodebase>true</UseCodebase>
    <IncludeAssemblyInVSIXContainer>true</IncludeAssemblyInVSIXContainer>
    <IncludeDebugSymbolsInVSIXContainer>true</IncludeDebugSymbolsInVSIXContainer>
    <IncludeDebugSymbolsInLocalVSIXDeployment>false</IncludeDebugSymbolsInLocalVSIXDeployment>
    <CopyBuildOutputToOutputDirectory>true</CopyBuildOutputToOutputDirectory>
    <CopyOutputSymbolsToOutputDirectory>true</CopyOutputSymbolsToOutputDirectory>
    <StartAction>Program</StartAction>
    <StartProgram Condition="'$(DevEnvDir)' != ''">$(DevEnvDir)devenv.exe</StartProgram>
    <StartArguments>/rootsuffix Exp</StartArguments>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Debug|AnyCPU' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <DebugType>pdbonly</DebugType>
    <Optimize>true</Optimize>
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Compile Include="ConfigForm.cs">
      <SubType>Form</SubType>
    </Compile>
    <Compile Include="PathHelpers.cs" />
    <Compile Include="ContextGenerator.cs" />
    <Compile Include="Properties\AssemblyInfo.cs" />
    <Compile Include="GenrateAIContextPackage.cs" />
    <Compile Include="source.extension.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>source.extension.vsixmanifest</DependentUpon>
    </Compile>
    <Compile Include="Menus.ctmenu.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>Menus.ctmenu.vsct</DependentUpon>
    </Compile>
    <Compile Include="WindowWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <None Include="source.extension.vsixmanifest">
      <SubType>Designer</SubType>
      <Generator>VsixManifestGenerator</Generator>
      <LastGenOutput>source.extension.cs</LastGenOutput>
    </None>
    <Content Include="Resources\Icon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <IncludeInVSIX>true</IncludeInVSIX>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <Content Include="Resources\GenerateIcon.png">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
      <IncludeInVSIX>true</IncludeInVSIX>
    </Content>
  </ItemGroup>
  <ItemGroup>
    <VSCTCompile Include="Menus.ctmenu.vsct">
      <ResourceName>Menus.ctmenu</ResourceName>
      <Generator>VsctGenerator</Generator>
      <LastGenOutput>Menus.ctmenu.cs</LastGenOutput>
    </VSCTCompile>
  </ItemGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Design" />
    <Reference Include="System.ComponentModel.Composition" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="Microsoft.VisualBasic" />
    <!-- ← Añadido -->
    <Reference Include="System.Drawing" />
  </ItemGroup>
  <ItemGroup>
    <PackageReference Include="Community.VisualStudio.VSCT" Version="16.0.29.6" PrivateAssets="all" />
    <PackageReference Include="Community.VisualStudio.Toolkit.17" Version="17.0.451" ExcludeAssets="Runtime" />
    <PackageReference Include="Microsoft.VSSDK.BuildTools" Version="17.0.5232" />
  </ItemGroup>
  <Import Project="$(MSBuildToolsPath)\Microsoft.CSharp.targets" />
  <Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(VSToolsPath)' != ''" />
</Project>

-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext\GenrateAIContextPackage.cs

using System;
using System.IO;
using System.Runtime.InteropServices;
using System.Threading;
using Microsoft.VisualStudio.Shell;
using Microsoft.VisualStudio.Shell.Interop;
using Task = System.Threading.Tasks.Task;
using System.ComponentModel.Design;

namespace GenrateAIContext
{
    [PackageRegistration(UseManagedResourcesOnly = true, AllowsBackgroundLoading = true)]
    [InstalledProductRegistration("Generar Contexto IA", "Dialogo de configuración", "1.0")]
    [ProvideMenuResource("Menus.ctmenu", 1)]
    [Guid("c27c8469-d722-43f4-8fcf-2d130fb5a0ac")]
    public sealed class GenrateAIContextPackage : AsyncPackage
    {
        protected override async Task InitializeAsync(
            CancellationToken ct, IProgress<ServiceProgressData> progress)
        {
            await JoinableTaskFactory.SwitchToMainThreadAsync(ct);
            var mcs = await GetServiceAsync(typeof(IMenuCommandService)) as OleMenuCommandService;
            var cmdId = new CommandID(
                new Guid("c27c8469-d722-43f4-8fcf-2d130fb5a0ac"), 0x0100);
            var menu = new MenuCommand((s, e) => ShowConfig(), cmdId);
            mcs.AddCommand(menu);
        }

        private async void ShowConfig()
        {
            await JoinableTaskFactory.SwitchToMainThreadAsync();
            // Obtener owner HWND
            var uiShell = await GetServiceAsync(typeof(SVsUIShell)) as IVsUIShell;
            uiShell.GetDialogOwnerHwnd(out IntPtr hwndOwner);

            // Default desde .contextconfig.json en la raíz de la solución
            var dte = (EnvDTE.DTE)await GetServiceAsync(typeof(EnvDTE.DTE));
            var root = Path.GetDirectoryName(dte.Solution.FullName);

            // Mostrar formulario
            using var form = new ConfigForm(root);
            if (hwndOwner != IntPtr.Zero)
                form.ShowDialog(new WindowWrapper(hwndOwner));
            else
                form.ShowDialog();
        }
    }
}


-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext\Menus.ctmenu.cs

// ------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the free extension VSIX Synchronizer
// </auto-generated>
// ------------------------------------------------------------------------------
using System;

namespace GenrateAIContext
{
    /// <summary>
    /// Helper class that exposes all GUIDs used across VS Package.
    /// </summary>
    internal sealed partial class PackageGuids
    {
        public const string GenrateAIContextString = "c27c8469-d722-43f4-8fcf-2d130fb5a0ac";
        public static Guid GenrateAIContext = new Guid(GenrateAIContextString);
    }
    /// <summary>
    /// Helper class that encapsulates all CommandIDs uses across VS Package.
    /// </summary>
    internal sealed partial class PackageIds
    {
        public const int MyMenuGroup = 0x0001;
        public const int MyCommand = 0x0100;
    }
}

-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext\Menus.ctmenu.vsct

<?xml version="1.0" encoding="utf-8"?>
<CommandTable xmlns="http://schemas.microsoft.com/VisualStudio/2005-10-18/CommandTable">

	<!-- 1) Referencias internas de Visual Studio -->
	<Extern href="stdidcmd.h"/>
	<Extern href="vsshlids.h"/>
	<Include href="KnownImageIds.vsct"/>

	<!-- 2) Comandos, grupos y botones -->
	<Commands package="GenrateAIContext">
		<Groups>
			<Group guid="GenrateAIContext" id="MyMenuGroup" priority="0x0600">
				<Parent guid="guidSHLMainMenu" id="IDM_VS_MENU_TOOLS"/>
			</Group>
		</Groups>
		<Buttons>
			<Button guid="GenrateAIContext" id="MyCommand" priority="0x0100" type="Button">
				<Parent guid="GenrateAIContext" id="MyMenuGroup"/>

				<!-- Aquí referenciamos el icono definido más abajo -->
				<Icon guid="GenrateAIContext" id="GenerateIcon"/>

				<Strings>
					<ButtonText>Generar Contexto IA…</ButtonText>
					<LocCanonicalName>.GenrateAIContext.MyCommand</LocCanonicalName>
				</Strings>
			</Button>
		</Buttons>
	</Commands>

	<!-- 3) Dónde aparece en el menú -->
	<CommandPlacements>
		<CommandPlacement guid="GenrateAIContext" id="MyCommand" priority="0x0100">
			<Parent guid="guidSHLMainMenu" id="IDM_VS_MENU_TOOLS"/>
		</CommandPlacement>
	</CommandPlacements>

	<!-- 4) Símbolos e imágenes -->
	<Symbols>
		<GuidSymbol name="GenrateAIContext" value="{c27c8469-d722-43f4-8fcf-2d130fb5a0ac}">
			<IDSymbol name="MyMenuGroup"  value="0x0001"/>
			<IDSymbol name="MyCommand"    value="0x0100"/>
			<IDSymbol name="GenerateIcon" value="0x0101"/>

			<!-- Definimos aquí la imagen PNG -->
	
		</GuidSymbol>
	</Symbols>

</CommandTable>


-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext\PathHelpers.cs

using System;
using System.IO;

namespace GenrateAIContext
{
    internal static class PathHelpers
    {
        public static string GetRelativePath(string basePath, string fullPath)
        {
            var bp = basePath.TrimEnd(Path.DirectorySeparatorChar) + Path.DirectorySeparatorChar;
            return Uri.UnescapeDataString(
                new Uri(bp).MakeRelativeUri(new Uri(fullPath)).ToString())
                   .Replace('/', Path.DirectorySeparatorChar);
        }
    }
}


-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext\Properties\AssemblyInfo.cs

using GenrateAIContext;
using System.Reflection;
using System.Runtime.InteropServices;

[assembly: AssemblyTitle(Vsix.Name)]
[assembly: AssemblyDescription(Vsix.Description)]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany(Vsix.Author)]
[assembly: AssemblyProduct(Vsix.Name)]
[assembly: AssemblyCopyright(Vsix.Author)]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

[assembly: ComVisible(false)]

[assembly: AssemblyVersion(Vsix.Version)]
[assembly: AssemblyFileVersion(Vsix.Version)]

namespace System.Runtime.CompilerServices
{
    public class IsExternalInit { }
}

-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext\source.extension.cs

// ------------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the extension VSIX Synchronizer
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GenrateAIContext
{
    internal sealed partial class Vsix
    {
        public const string Id = "GenrateAIContext.57db8ea2-bbfb-4c85-a80b-e4ba6ee4eca2";
        public const string Name = "GenrateAIContext";
        public const string Description = @"Empty VSIX Project.";
        public const string Language = "en-US";
        public const string Version = "1.0";
        public const string Author = "Company";
        public const string Tags = "";
    }
}


-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext\source.extension.vsixmanifest

<?xml version="1.0" encoding="utf-8"?>
<PackageManifest Version="2.0.0"
                 xmlns="http://schemas.microsoft.com/developer/vsx-schema/2011"
                 xmlns:d="http://schemas.microsoft.com/developer/vsx-schema-design/2011">
	<Metadata>
		<Identity Id="kikelodeon.GenerateAIContext"
                  Version="3.0"
                  Language="en-US"
                  Publisher="kikelodeon" />
		<DisplayName>Generate AI Context</DisplayName>
		<Description xml:space="preserve">
      Generates a text file containing the entire project context (code and config),
      with support for folder-and-extension exclusions via .contextconfig.json.
    </Description>
		<Icon>Resources\Icon.png</Icon>
		<PreviewImage>Resources\Preview.png</PreviewImage>
		<Tags>context,project,vsix</Tags>
		<MoreInfoUrl>https://github.com/kikelodeon/GenerateAIContext</MoreInfoUrl>
	</Metadata>

	<Installation>
		<InstallationTarget Id="Microsoft.VisualStudio.Community"
                            Version="[17.0,18.0)">
			<ProductArchitecture>amd64</ProductArchitecture>
		</InstallationTarget>
		<InstallationTarget Id="Microsoft.VisualStudio.Pro"
                            Version="[17.0,18.0)">
			<ProductArchitecture>amd64</ProductArchitecture>
		</InstallationTarget>
		<InstallationTarget Id="Microsoft.VisualStudio.Enterprise"
                            Version="[17.0,18.0)">
			<ProductArchitecture>amd64</ProductArchitecture>
		</InstallationTarget>
	</Installation>

	<Prerequisites>
		<Prerequisite Id="Microsoft.VisualStudio.Component.CoreEditor" Version="[17.0,)" />
		<Prerequisite Id="Microsoft.VisualStudio.Component.Roslyn.Compiler" Version="[4.0,)" />
	</Prerequisites>

	<Assets>
		<Asset Type="Microsoft.VisualStudio.VsPackage"
               d:Source="Project"
               d:ProjectName="%CurrentProject%"
               Path="|%CurrentProject%;PkgdefProjectOutputGroup|" />
		<Asset Type="Microsoft.VisualStudio.Menus"
               d:Source="File"
               Path="Menus.ctmenu.vsct" />
		<Asset Type="Microsoft.VisualStudio.Icon"
               d:Source="File"
               Path="Resources\Icon.png" />
	</Assets>
</PackageManifest>


-----

### C:\Users\kikelo\Documents\GitHub\GenerateAiContextFromFolderPath\GenrateAIContext\WindowWrapper.cs

using System;
using System.Windows.Forms;

namespace GenrateAIContext
{
    internal class WindowWrapper : IWin32Window
    {
        private readonly IntPtr _hwnd;
        public WindowWrapper(IntPtr hwnd) => _hwnd = hwnd;
        public IntPtr Handle => _hwnd;
    }
}


-----

### Árbol:
.gitignore
GenrateAIContext.sln
GenrateAIContext\ConfigForm.cs
GenrateAIContext\ContextGenerator.cs
GenrateAIContext\GenrateAIContext.csproj
GenrateAIContext\GenrateAIContextPackage.cs
GenrateAIContext\Menus.ctmenu.cs
GenrateAIContext\Menus.ctmenu.vsct
GenrateAIContext\PathHelpers.cs
GenrateAIContext\Properties\AssemblyInfo.cs
GenrateAIContext\source.extension.cs
GenrateAIContext\source.extension.vsixmanifest
GenrateAIContext\WindowWrapper.cs
